"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[578],{4382:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"features/signup/widgets","title":"Components of Signup Feature","description":"This document provides an overview of the components (or widgets) used in the signup feature.  These widgets are modular components that enhance the user experience and simplify the implementation of the signup process.","source":"@site/docs/features/signup/widgets.md","sourceDirName":"features/signup","slug":"/features/signup/widgets","permalink":"/tutorly/docs/features/signup/widgets","draft":false,"unlisted":false,"editUrl":"https://github.com/ohjime/tutorly/tree/main/docs/docs/docs/features/signup/widgets.md","tags":[],"version":"current","frontMatter":{}}');var r=i(4848),s=i(8453);const a={},o="Components of Signup Feature",d={},c=[{value:"Widgets Overview",id:"widgets-overview",level:2},{value:"SignupWizard",id:"signupwizard",level:3},{value:"Component Diagram of SignupWizard",id:"component-diagram-of-signupwizard",level:5},{value:"Sequence Diagram of SignupWizard",id:"sequence-diagram-of-signupwizard",level:5},{value:"SignupProgressBar",id:"signupprogressbar",level:3},{value:"Component Diagram of SignProgressBar",id:"component-diagram-of-signprogressbar",level:5},{value:"Sequence Diagram of SignupProgressBar",id:"sequence-diagram-of-signupprogressbar",level:5},{value:"SignupSwitcher",id:"signupswitcher",level:3},{value:"Component Diagram of SignupSwitcher",id:"component-diagram-of-signupswitcher",level:5},{value:"Sequence Diagram when the SignupStep Changes.",id:"sequence-diagram-when-the-signupstep-changes",level:5},{value:"SignupStep",id:"signupstep",level:2},{value:"Class Diagram of SignupStep",id:"class-diagram-of-signupstep",level:5},{value:"1. <code>String</code> title",id:"1-string-title",level:5},{value:"2. <code>List&lt;String&gt;</code> dialogue",id:"2-liststring-dialogue",level:5},{value:"3. <code>StepPredicate</code> showIf",id:"3-steppredicate-showif",level:5},{value:"4. <code>StepFormBuilder</code> builder",id:"4-stepformbuilder-builder",level:5},{value:"5. <code>StepCallback</code> callback",id:"5-stepcallback-callback",level:5},{value:"Putting It All Together",id:"putting-it-all-together",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"components-of-signup-feature",children:"Components of Signup Feature"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides an overview of the components (or widgets) used in the signup feature.  These widgets are modular components that enhance the user experience and simplify the implementation of the signup process."}),"\n",(0,r.jsx)(n.h2,{id:"widgets-overview",children:"Widgets Overview"}),"\n",(0,r.jsx)(n.h3,{id:"signupwizard",children:"SignupWizard"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SignupWizard"})," component guides the user through each signup step by animating a series of instructional messages with a typewriter effect. Simultaneously, a Rive animation (e.g., a book asset) plays when the ",(0,r.jsx)(n.code,{children:"say()"})," method is invoked or when the widget loads. This conversational approach emulates the guided experience found in apps like Duolingo and can be extracted as a standalone package for use in other projects."]}),"\n",(0,r.jsx)(n.h5,{id:"component-diagram-of-signupwizard",children:"Component Diagram of SignupWizard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph LR\n    SignupWizard --\x3e TypewriterText\n    SignupWizard --\x3e RiveAnimation\n"})}),"\n",(0,r.jsx)(n.h5,{id:"sequence-diagram-of-signupwizard",children:"Sequence Diagram of SignupWizard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant User\n    participant SignupWizard\n    participant TypewriterText\n    participant RiveAnimation\n\n    User->>SignupWizard: onLoad/start\n    SignupWizard->>TypewriterText: animate(dialogue)\n    SignupWizard->>RiveAnimation: trigger say()\n    TypewriterText->>User: display text\n    RiveAnimation->>User: play animation\n    User->>SignupWizard: nextStep()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"signupprogressbar",children:"SignupProgressBar"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SignupProgressBar"})," visually represents the user's progress through the signup flow. It takes the total number of steps and the current step index as inputs, then animates the progress bar smoothly whenever the index changes, providing clear visual feedback to the user."]}),"\n",(0,r.jsx)(n.h5,{id:"component-diagram-of-signprogressbar",children:"Component Diagram of SignProgressBar"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph LR\n    SignupProgressBar --\x3e ProgressBarWidget\n    SignupProgressBar --\x3e AnimationController\n"})}),"\n",(0,r.jsx)(n.h5,{id:"sequence-diagram-of-signupprogressbar",children:"Sequence Diagram of SignupProgressBar"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant View\n    participant SignupProgressBar\n    participant AnimationController\n\n    View->>SignupProgressBar: stepIndex updated\n    SignupProgressBar->>AnimationController: animate to newPercent\n    AnimationController->>SignupProgressBar: update rendering\n    SignupProgressBar->>View: display new progress\n"})}),"\n",(0,r.jsx)(n.h3,{id:"signupswitcher",children:"SignupSwitcher"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SignupSwitcher"})," handles transitions between step widgets using Flutter's ",(0,r.jsx)(n.code,{children:"AnimatedSwitcher"}),". By keying each container to the current step index, it detects changes and animates the transition from the old step to the new one. While page-based animations might simplify this, using ",(0,r.jsx)(n.code,{children:"AnimatedSwitcher"})," gives precise control over entry and exit effects for each step."]}),"\n",(0,r.jsx)(n.h5,{id:"component-diagram-of-signupswitcher",children:"Component Diagram of SignupSwitcher"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    SignupSwitcher --\x3e AnimatedSwitcher\n    SignupSwitcher --\x3e SignupStep\n    SignupStep --\x3e StepPredicate\n    SignupStep --\x3e StepFormBuilder\n    SignupStep --\x3e StepCallback\n"})}),"\n",(0,r.jsx)(n.h5,{id:"sequence-diagram-when-the-signupstep-changes",children:"Sequence Diagram when the SignupStep Changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant User\n    participant SignupSwitcher\n    participant SignupStep\n\n    User->>SignupSwitcher: Change currentIndex\n    SignupSwitcher->>AnimatedSwitcher: Change Key Value of Container\n    AnimatedSwitcher->>User: Transition Effect Triggered\n    SignupSwitcher->>SignupStep: Change Current Step\n    SignupStep->>User: Build New Step\n"})}),"\n",(0,r.jsx)(n.h2,{id:"signupstep",children:"SignupStep"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SignupStep"})," class represents a single step in the signup process, encapsulating title, dialogue, conditional display logic, UI building, and data handling."]}),"\n",(0,r.jsx)(n.h5,{id:"class-diagram-of-signupstep",children:"Class Diagram of SignupStep"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"classDiagram\n    class SignupStep {\n        + String title\n        + List<String> dialogue\n        + StepPredicate showIf\n        + StepFormBuilder builder\n        + StepCallback callback\n    }\n\n    SignupStep --\x3e StepPredicate\n    SignupStep --\x3e StepFormBuilder\n    SignupStep --\x3e StepCallback\n\n    class StepPredicate {\n        <<typedef>>\n        + bool Function(BuildContext context)\n    }\n\n    class StepFormBuilder {\n        <<typedef>>\n        + Widget Function(BuildContext context, GlobalKey<FormBuilderState> key)\n    }\n\n    class StepCallback {\n        <<typedef>>\n        + void Function(BuildContext context, Map<String, dynamic> data)\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SignupStep"})," class contains the following properties:"]}),"\n",(0,r.jsxs)(n.h5,{id:"1-string-title",children:["1. ",(0,r.jsx)(n.code,{children:"String"})," title"]}),"\n",(0,r.jsx)(n.p,{children:"Title is a string that represents the title of the step. Displayed in the AppBar, it provides a constant label for the current step as the animated dialogue changes."}),"\n",(0,r.jsxs)(n.h5,{id:"2-liststring-dialogue",children:["2. ",(0,r.jsx)(n.code,{children:"List<String>"})," dialogue"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"dialogue"})," list contains the messages shown by ",(0,r.jsx)(n.code,{children:"SignupWizard"}),". Each string is displayed with a typewriter animation to guide the user through the step."]}),"\n",(0,r.jsxs)(n.h5,{id:"3-steppredicate-showif",children:["3. ",(0,r.jsx)(n.code,{children:"StepPredicate"})," showIf"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"showIf"})," predicate determines whether the step should be shown, based on the current ",(0,r.jsx)(n.code,{children:"BuildContext"}),". This allows conditional steps that adapt to user data or previous responses."]}),"\n",(0,r.jsxs)(n.h5,{id:"4-stepformbuilder-builder",children:["4. ",(0,r.jsx)(n.code,{children:"StepFormBuilder"})," builder"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"builder"})," function constructs the UI for this step, typically returning a form widget. It receives a ",(0,r.jsx)(n.code,{children:"BuildContext"})," and a ",(0,r.jsx)(n.code,{children:"GlobalKey<FormBuilderState>"})," so external controls (e.g., Next button) can trigger validation."]}),"\n",(0,r.jsxs)(n.h5,{id:"5-stepcallback-callback",children:["5. ",(0,r.jsx)(n.code,{children:"StepCallback"})," callback"]}),"\n",(0,r.jsxs)(n.p,{children:["After form validation, the ",(0,r.jsx)(n.code,{children:"callback"})," is called with the ",(0,r.jsx)(n.code,{children:"BuildContext"})," and a ",(0,r.jsx)(n.code,{children:"Map<String, dynamic>"})," containing the user's input. This allows custom handling of the data, such as saving to a repository or updating application state."]}),"\n",(0,r.jsx)(n.h2,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,r.jsxs)(n.p,{children:["By combining ",(0,r.jsx)(n.code,{children:"SignupWizard"}),", ",(0,r.jsx)(n.code,{children:"SignupProgressBar"}),", ",(0,r.jsx)(n.code,{children:"SignupSwitcher"}),", and ",(0,r.jsx)(n.code,{children:"SignupStep"}),", you can build a complete, interactive signup flow:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"SignupView(\n  steps: [\n    SignupStep(\n      title: 'Create Account',\n      dialogue: ['Welcome!', 'Let\\'s create your account.'],\n      showIf: (_) => true,\n      builder: (context, key) => EmailForm(key: key),\n      callback: (context, data) { /* save email */ },\n    ),\n    // add additional steps...\n  ],\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This setup handles animations, progress tracking, and data flow, offering a modular solution for onboarding experiences."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);